---
- hosts: localhost
  connection: local
  vars:
      # 512MB size
    - droplet_size: 512mb
      # Ubuntu 14.04 x64
    - droplet_image: 11388420
      # nyc2
    - droplet_region: nyc3
      # my ssh key
    - droplet_ssh_keys: 761015
  tasks:
    - name: Create odin
      digital_ocean: >
        state=present
        command=droplet
        size_id={{ droplet_size }}
        region_id={{ droplet_region }}
        image_id={{ droplet_image }}
        ssh_key_ids={{ droplet_ssh_keys }}
        name=odin
        unique_name=yes
      register: do
    - name: Add new host to our inventory.
      add_host:
        name: "{{ do.droplet.ip_address }}"
        groups: monitor
      when: do.droplet is defined
    - name: Wait for SSH to come up
      local_action: 
        module: wait_for 
          host={{ do.droplet.ip_address }}
          port=22
          delay=30
          timeout=400
          state=started
          connect_timeout=1
          search_regex=OpenSSH
- hosts: monitor
  tasks:
    - lineinfile: "dest=/etc/environment line=CLOUD_FLARE='{{ lookup('env','CLOUD_FLARE') }}'"
    - copy: src=/home/meneal/Documents/nodeDO/eyedns.sh dest=~/eyedns.sh
    - command: chmod +x eyedns.sh
    - shell: . /etc/environment && ~/eyedns.sh
      sudo: no
        # Install apache, update_cache is like running `apt-get update`
    - name: Install Apache2
      apt: name=apache2 state=latest update_cache=yes

      # Install PHP5
    - name: Install PHP 5
      apt: name={{ item }} state=latest
      with_items:
        - php5
        - php5-cgi
        - php5-cli
        - php5-curl
        - php5-json
        - php5-odbc
        - php5-tidy
        - php5-common
        - php5-sqlite
        - php5-xmlrpc
        - libapache2-mod-php5

      # Install MySQL, python-mysqldb is required by ansible for use of the
      # MySQL modules
    - name: Install MySQL
      apt: name={{ item }} state=latest
      with_items:
        - mysql-server
        - python-mysqldb
        - php5-mysql
        - libapache2-mod-auth-mysql

    - name: Install nagios extras
      apt: name={{ item }} state=latest
      with_items:
        - libgd2-xpm-dev 
        - openssl 
        - libssl-dev 
        - apache2-utils
      #copy the swap script and run it
    - copy: src=/home/meneal/Documents/nodeDO/mk_swap.sh dest=~/mk_swap.sh
    - script: mk_swap.sh
    - name: Create nagios user
      command: "{{ item }}"
      with_items:
        - useradd nagios
        - groupadd nagcmd
        - usermod -a -G nagcmd nagios
      #remove this later
      ignore_errors: True
      # Start MySQL
    - name: Start MySQL
      service: name=mysql state=started

    - name: create mysql root pass
      command: /usr/bin/openssl rand -base64 16
      register: mysql_root_pass

    - name: update mysql root passwd
      mysql_user: name=root host={{ item }} password={{ mysql_root_pass.stdout }}
      with_items:
        - "{{ ansible_hostname }}"
        - 127.0.0.1
        - ::1
        - localhost

    - name: copy .my.cnf file with root password credentials
      template: src=templates/my.cnf.j2 dest=/root/.my.cnf owner=root mode=0600

    - name: delete anonymous MySQL server user for localhost
      mysql_user: name="" state=absent

    - name: remove the MySQL test database
      mysql_db: name=test state=absent
    - debug: var=mysql_root_pass

    - name: get nagios source files
      get_url:
        url="http://prdownloads.sourceforge.net/sourceforge/nagios/nagios-4.0.8.tar.gz"
        dest="/root/"
      register: new_archive

    - name: unarchive the source files
      unarchive:
        src="/root/nagios-4.0.8.tar.gz"
        dest="/root/"
        copy=no
      when: new_archive|changed

    - name: build nagios from source
      command: "{{ item }}"
      with_items: 
      - ./configure --with-nagios-group=nagios --with-command-group=nagcmd
      - make all
      - make install
      - make install-commandmode
      - make install-init
      - make install-config
      - /usr/bin/install -c -m 644 sample-config/httpd.conf /etc/apache2/sites-available/nagios.conf
      args:
        chdir: nagios-4.0.8/

    - name: get nagios plugins files
      get_url:
        url="http://nagios-plugins.org/download/nagios-plugins-2.0.3.tar.gz"
        dest="/root/"
      register: new_archive2

    - name: unarchive the plugins
      unarchive:
        src="/root/nagios-plugins-2.0.3.tar.gz"
        dest="/root/"
        copy=no
      when: new_archive|changed

    - name: install nagios plugins
      command: "{{item}}"
      with_items: 
      - ./configure --with-nagios-user=nagios --with-nagios-group=nagios --with-openssl
      - make
      - sudo make install
      args:
        chdir: nagios-plugins-2.0.3/

    - name: create config directory should upload contact config here too
      command: "{{ item }}"
      with_items:
        - sudo mkdir /usr/local/nagios/etc/servers
    - copy: src=/home/meneal/Documents/nodeDO/nagios.cfg dest=/usr/local/nagios/etc/nagios.cfg
    - copy: src=/home/meneal/Documents/nodeDO/contacts.cfg dest=/usr/local/nagios/etc/objects/contacts.cfg
    - name: configure apache
      command: "{{ item }}"
      with_items:
      - a2enmod rewrite
      - a2enmod cgi
      - htpasswd -db -c /usr/local/nagios/etc/htpasswd.users nagiosadmin awesome
      - ln -s /etc/apache2/sites-available/nagios.conf /etc/apache2/sites-enabled/
      - service nagios start
      - service apache2 restart
      - ln -s /etc/init.d/nagios /etc/rcS.d/S99nagios
    - copy: src=/home/meneal/Documents/nodeDO/proxy.cfg dest=/usr/local/nagios/etc/servers/proxy.cfg
    - copy: src=/home/meneal/Documents/nodeDO/thanatos.cfg dest=/usr/local/nagios/etc/servers/thanatos.cfg
    - copy: src=/home/meneal/Documents/nodeDO/kronos.cfg dest=/usr/local/nagios/etc/servers/kronos.cfg
    - name: Restart nagios with config files intact
      command: service nagios reload



